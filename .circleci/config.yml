version: 2.1

orbs:
  slack: circleci/slack@4.3.0

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Backend build is successful",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Test frontend"
          command: | 
            cd frontend
            npm install
            npm run test
      
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Test backend"
          command: | 
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: "Scan frontend"
          command: | 
            cd frontend
            npm audit --audit-level=critical  
      - run:
          name: "Fail"
          when: on_fail
          command: |
            echo "Canceling workflow as a step resulted in failure" 
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [backend-build]
      - run:
          name: "Scan backend"
          command: | 
            cd backend
            npm audit --audit-level=critical
      - run:
          name: "Fail"
          when: on_fail
          command: |
            echo "Canceling workflow as a step resulted in failure" 


  
  deploy-infrastructure: # ensure add -${CIRCLE_WORKFLOW_ID} to the end of stack names
    docker:
      - image: amazon/aws-cli
    environment:
      ANSIBLE_INVENTORY_PATH: .circleci/ansible/inventory.txt
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name uda-backend \
              --parameter-overrides ID=34432dfdfdfggt  
              
      # - run:  
      #     name: Ensure front-end infrastructure exist ..
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udapeople \
      #         --stack-name uda-frontend-${CIRCLE_WORKFLOW_ID} \
      #         --parameter-overrides ID=udapeople-${CIRCLE_WORKFLOW_ID}  
      
      #Make sure  switch to circle id in names swithc to above code for ID
      - run:  
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name uda-frontend \
              --parameter-overrides ID=udapeople-34432dfdfdfggt  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INSTANCE_PUBLIC_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output=text )   
            echo "[all]" > $ANSIBLE_INVENTORY_PATH
            echo "${INSTANCE_PUBLIC_IP}" >> $ANSIBLE_INVENTORY_PATH
            cat $ANSIBLE_INVENTORY_PATH  

      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: "Destroy environment"
          command: |      
              aws cloudformation delete-stack --stack-name uda-frontend-${CIRCLE_WORKFLOW_ID} 
              aws cloudformation delete-stack --stack-name uda-backend-${CIRCLE_WORKFLOW_ID} 
          when: on_fail  

  configure-infrastructure:
    docker:
      - image: williamyeh/ansible:ubuntu18.04
    environment:
       TYPEORM_USERNAME2: $TYPEORM_USERNAME 
      
    steps:
      
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:c1:42:5d:4b:2c:12:c8:75:66:63:b5:75:77:2b:20"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: Configure server
          environment:
            DUMMY_ENV_VAR: hello_there
          command: |
            ls -la
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            ansible-playbook -i inventory.txt  configure-server.yml -vvv
      # Here's where you will add some code to rollback on failure    

  run-migrations:
    docker:
      - image: node:12.21.0
  
    
    # Remeebr to update the RDS host name in the project settings
    # Remeebr to update MEMSTASH_API_KEY
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend/
            export NODE_ENV=local
            export VERSION=1
            export TYPEORM_CONNECTION=postgres
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            npm install
             if npm run migrations | grep "has been executed successfully" 
             then 
                echo "1" > migrationStatus.txt 
             else 
               echo  "0" > migrationStatus.txt
            fi   
            
      - run:
          name: Send migration results to memstash
          command: |           
            MEMSTASH_KEY=migration_${CIRCLE_WORKFLOW_ID}
            echo $MEMSTASH_KEY
            curl -H "Content-Type: text/plain" -H "token:${MEMSTASH_API_TOKEN}" --request PUT --data "$(cat backend/migrationStatus.txt)" https://api.memstash.io/values/${MEMSTASH_KEY}
            
     # Here's where you will add some code to rollback on failure  

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install curl
            curl -sL https://rpm.nodesource.com/setup_12.x |  bash -
            yum install -y nodejs  npm  
            cd frontend/
            npm install 
            # npm run build 
      - run:
          name: Get backend url
          command: |
            export API_URL="http://$(tail -1 .circleci/ansible/inventory.txt):3030"
            echo "${API_URL}"
            pwd
            cd frontend
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            aws s3 cp  --recursive  dist/  s3://udapeople-udapeople-34432dfdfdfggt/ 
      # Remeebr to use WORKD_FLOW_ID in the name of s3
      # Here's where you will addsome code to rollback on failure    
  deploy-backend:
    docker:
      - image: williamyeh/ansible:ubuntu18.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:c1:42:5d:4b:2c:12:c8:75:66:63:b5:75:77:2b:20"]
      - attach_workspace:
          at: ~/

      - run:
          name: Create Env file
          command: |
            cd /root/project/backend/
            echo NODE_ENV=local > .env
            echo VERSION=1 >>.env
            echo TYPEORM_CONNECTION=postgres >>.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >>.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >>.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >>.env 
            echo TYPEORM_HOST=$TYPEORM_HOST >>.env 
            echo TYPEORM_PORT=$TYPEORM_PORT >>.env 
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >>.env 
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >>.env 
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >>.env 
            cat .env   
      - run:
          name: Compress Backend files
          command: |
            tar -czvf /root/project/backend.tar.gz /root/project/backend/
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            ansible-playbook -i inventory.txt  deploy-backend.yml -vvv 
            
      # Here's where you will add some code to rollback on failure  


workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
        # - deploy-infrastructure
      # - deploy-infrastructure:
      #     # requires: [test-frontend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
        - run-migrations
     
        - deploy-frontend:
            requires: [run-migrations, deploy-backend]
        - deploy-backend:
            requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
      