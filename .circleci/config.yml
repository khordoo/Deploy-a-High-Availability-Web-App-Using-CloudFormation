version: 2.1

orbs:
  slack: circleci/slack@4.3.0

commands:   # Remeebr to use dynamic workflow id in these codes..
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # aws s3 rm "s3://udapeople-<<parameters.workflow_id>>/" --recursive
            # aws cloudformation delete-stack --stack-name "uda-frontend-<<parameters.workflow_id>>" 
            # aws cloudformation delete-stack --stack-name "uda-backend-<<parameters.workflow_id>>"  

            aws s3 rm s3://udapeople-udapeople-34432dfdfdfggt/ --recursive
            aws cloudformation delete-stack --stack-name "uda-frontend" 
            aws cloudformation delete-stack --stack-name "uda-backend"  



  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow..
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            
            MEMSTASH_KEY="migration_<<parameters.workflow_id>>"
            echo $MEMSTASH_KEY

            # revmoe after testing 
            MEMSTASH_KEY=udapeople
            MEMSTASH_API_TOKEN=7f11eee2-7fe8-4f2b-9e0b-27669fed942e
            SUCCESS=$(curl -H "Content-Type: text/plain" -H "token:${MEMSTASH_API_TOKEN}" --request GET "https://api.memstash.io/values/${MEMSTASH_KEY}")
            echo $SUCCESS
            # SUCCESS = 1
            if [ $SUCCESS=="1" ]
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              echo "Migration revered"
            else 
              echo "Nothing to revent.All good."
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Backend build is successful",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Test frontend"
          command: | 
            cd frontend
            npm install
            npm run test
      
                
  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Test backend"
          command: | 
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: "Scan frontend"
          command: | 
            cd frontend
            npm audit --audit-level=critical  
      - run:
          name: "Fail"
          when: on_fail
          command: |
            echo "Canceling workflow as a step resulted in failure" 
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [backend-build]
      - run:
          name: "Scan backend"
          command: | 
            cd backend
            npm audit --audit-level=critical
      - run:
          name: "Fail"
          when: on_fail
          command: |
            echo "Canceling workflow as a step resulted in failure" 


  
  deploy-infrastructure: # ensure add -${CIRCLE_WORKFLOW_ID} to the end of stack names
    docker:
      - image: amazon/aws-cli
    environment:
      ANSIBLE_INVENTORY_PATH: .circleci/ansible/inventory.txt
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name uda-backend \
              --parameter-overrides ID=34432dfdfdfggt  
              
      # - run:  
      #     name: Ensure front-end infrastructure exist ..
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udapeople \
      #         --stack-name uda-frontend-${CIRCLE_WORKFLOW_ID} \
      #         --parameter-overrides ID=udapeople-${CIRCLE_WORKFLOW_ID}  
      
      #Make sure  switch to circle id in names swithc to above code for ID
      - run:  
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name uda-frontend \
              --parameter-overrides ID=udapeople-34432dfdfdfggt  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            INSTANCE_PUBLIC_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output=text )   
            echo "[all]" > $ANSIBLE_INVENTORY_PATH
            echo "${INSTANCE_PUBLIC_IP}" >> $ANSIBLE_INVENTORY_PATH
            cat $ANSIBLE_INVENTORY_PATH  

      - run:
          name: Install dependencies
          command: |
            yum install tar gzip -y

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - run:
          name: "Destroy environment"
          command: |      
              aws cloudformation delete-stack --stack-name uda-frontend-${CIRCLE_WORKFLOW_ID} 
              aws cloudformation delete-stack --stack-name uda-backend-${CIRCLE_WORKFLOW_ID} 
          when: on_fail  

  configure-infrastructure:
    docker:
      - image: williamyeh/ansible:ubuntu18.04
    environment:
       TYPEORM_USERNAME2: $TYPEORM_USERNAME 
      
    steps:
      
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:c1:42:5d:4b:2c:12:c8:75:66:63:b5:75:77:2b:20"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: Configure server
          environment:
            DUMMY_ENV_VAR: hello_there
          command: |
            ls -la
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            ansible-playbook -i inventory.txt  configure-server.yml -vvv
      # Here's where you will add some code to rollback on failure    

  run-migrations:
    docker:
      - image: node:12.21.0
  
    
    # Remeebr to update the RDS host name in the project settings
    # Remeebr to update MEMSTASH_API_KEY
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend/
            export NODE_ENV=local
            export VERSION=1
            export TYPEORM_CONNECTION=postgres
            export TYPEORM_MIGRATIONS_DIR=./src/migrations
            export TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            export TYPEORM_MIGRATIONS=./src/migrations/*.ts
            npm install
             if npm run migrations | grep "has been executed successfully" 
             then 
                echo "1" > migrationStatus.txt 
             else 
               echo  "0" > migrationStatus.txt
            fi   
            
      - run:
          name: Send migration results to memstash
          command: |           
            MEMSTASH_KEY=migration_${CIRCLE_WORKFLOW_ID}
            echo $MEMSTASH_KEY
            curl -H "Content-Type: text/plain" -H "token:${MEMSTASH_API_TOKEN}" --request PUT --data "$(cat backend/migrationStatus.txt)" https://api.memstash.io/values/${MEMSTASH_KEY}
            
     # Here's where you will add some code to rollback on failure  

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install curl
            curl -sL https://rpm.nodesource.com/setup_12.x |  bash -
            yum install -y nodejs  npm  
            cd frontend/
            npm install 
            # npm run build 
      - run:
          name: Get backend url
          command: |
            export API_URL="http://$(tail -1 .circleci/ansible/inventory.txt):3030"
            echo "${API_URL}"
            pwd
            cd frontend
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            aws s3 cp  --recursive  dist/  s3://udapeople-udapeople-34432dfdfdfggt/ 
      # Remeebr to use WORKD_FLOW_ID in the name of s3
      # Here's where you will addsome code to rollback on failure    
  deploy-backend:
    docker:
      - image: williamyeh/ansible:ubuntu18.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a5:c1:42:5d:4b:2c:12:c8:75:66:63:b5:75:77:2b:20"]
      - attach_workspace:
          at: ~/

      - run:
          name: Create Env file
          command: |
            cd /root/project/backend/
            echo NODE_ENV=local > .env
            echo VERSION=1 >>.env
            echo TYPEORM_CONNECTION=postgres >>.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >>.env
            echo TYPEORM_ENTITIES=/home/ubuntu/backend/dist/modules/domain/**/*.entity{.ts,.js} >>.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >>.env 
            echo TYPEORM_HOST=$TYPEORM_HOST >>.env 
            echo TYPEORM_PORT=$TYPEORM_PORT >>.env 
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >>.env 
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >>.env 
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >>.env 
            cat .env   
      - run:
          name: Compress Backend files
          command: |
            tar -czvf /root/project/backend.tar.gz /root/project/backend/
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            ansible-playbook -i inventory.txt  deploy-backend.yml -vvv 
            
      # Here's where you will add some code to rollback on failure  
  smoke-test:
    docker:
      - image: bash
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --update curl && \
            rm -rf /var/cache/apk/*
            apk add bash
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install \
                awscli \
            && rm -rf /var/cache/apk/*
            aws --version
      - run:
          name: Get backend url
          command: |
            API_URL=http://$(tail -1 .circleci/ansible/inventory.txt):3030/api/status 
            echo $API_URL
            echo $API_URL > api_url.txt

      - run:
          name: Backend smoke test.
          command: |
            if curl -s $(cat api_url.txt) --connect-timeout 5
            then
               exit 0
            else 
               exit 1 
            fi 
          
      - run:
          name: Frontend smoke test.
          command: |
            #URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            URL="http://udapeople-udapeople-34432dfdfdfggt.s3-website-us-west-2.amazonaws.com/"
            if curl -s ${URL} | grep "Welcome"
            then
               exit 0
            else
               exit 1
            fi
      - destroy-environment:
          workflow_id: udapeople-34432dfdfdfggt
      - revert-migrations:
           workflow_id: udapeople-34432dfdfdfggt
      # Here's where you will add some code to rollback on failure.  
      # Rmeover to use URL with workflow s3 path.

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
        # - deploy-infrastructure
      # - deploy-infrastructure:
      #     # requires: [test-frontend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
        # - run-migrations:
        #     requires: [deploy-infrastructure]
        # - deploy-frontend:
        #     requires: [run-migrations, deploy-backend]
        # - deploy-backend:
        #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
        - smoke-test
            # requires: [deploy-infrastructure]
         
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
      